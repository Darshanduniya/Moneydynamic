from airflow import DAG

from airflow.operators.python_operator import PythonOperator

from datetime import datetime, timedelta

import pymonetdb

import subprocess

import logging

import time

def read_industry_names(filename):

    with open(filename, 'r') as file:

        return [line.strip() for line in file]

def read_industries(filename):

    with open(filename, 'r') as file:

        return [line.strip() for line in file]

def read_monetdb_credentials(filename):

    credentials = {}

    with open(filename, 'r') as file:

        for line in file:

            key, value = line.strip().split('=')

            credentials[key] = value

    return credentials

# File paths

industry_names_file = '/path/to/industry_names.txt'

industries_file = '/path/to/industries.txt'

monetdb_credentials_file = '/path/to/monetdb_credentials.txt'

# Read industry names and industries from files

industry_names = read_industry_names(industry_names_file)

industries = read_industries(industries_file)

# Read MonetDB connection credentials from file

monetdb_credentials = read_monetdb_credentials(monetdb_credentials_file)

def execute_monet_query(industry_name, industry, monetdb_credentials):

    conn = pymonetdb.connect(username=monetdb_credentials['username'], password=monetdb_credentials['password'], hostname=monetdb_credentials['hostname'], port=int(monetdb_credentials['port']), database=monetdb_credentials['database'])

    cursor = conn.cursor()

    with open('/path/to/execution_log_query.sql', 'r') as query_file:

        query_var = query_file.read()

        query_assign = query_var.replace('{industry_name}', industry_name)

    cursor.execute(query_assign)

    logging.info("Executed above execution log table query")

    results = cursor.fetchone()[0]

    results = int(results)

    with open('/path/to/latest_refresh_query.sql', 'r') as query_file_two:

        query_var_two = query_file_two.read()

        query_assign_two = query_var_two.replace('{industry}', industry)

    cursor.execute(query_assign_two)

    result_two = cursor.fetchone()[0]

    if results > 0:

        if result_two == 'B':

            industry_name_upper = industry_name.upper()

            dag_id = f'US_{industry_name_upper}_B'

            logging.info("B side dag was triggered")

            subprocess.run(['airflow', 'dags', 'trigger', dag_id])

            industry_name_lower = industry_name.lower()

            time.sleep(30)

            with open('/path/to/update_query_latest_refresh_one.sql', 'r') as query_file_three:

                query_var_three = query_file_three.read()

                query_assign_three = query_var_three.replace('{industry}', industry)

            retry_count = 0

            max_retries = 3

            while retry_count < max_retries:

                try:

                    cursor.execute(query_assign_three)

                    conn.commit()

                    break

                except pymonetdb.OperationalError as e:

                    error_code = e.args[0]

                    if error_code == "42000! Update failed due to conflict with another transaction":

                        logging.warning(f"Update failed due to conflict, retrying ({retry_count + 1}/{max_retries})...")

                        retry_count += 1

                        time.sleep(10)

                    else:

                        raise

            with open('/path/to/update_query_execution_log_one.sql', 'r') as query_file_four:

                query_var_four = query_file_four.read()

                query_assign_four = query_var_four.replace('{industry_name}', industry_name)

            cursor.execute(query_assign_four)

            conn.commit()

        else:

            industry_name_upper = industry_name.upper()

            dag_id = f'US_{industry_name_upper}_A'

            logging.info("A side dag was triggered")

            subprocess.run(['airflow', 'dags', 'trigger', dag_id])

            industry_name_lower = industry_name.lower()

            with open('/path/to/update_query_latest_refresh_two.sql', 'r') as query_file_five:

                query_var_five = query_file_five.read()

                query_assign_five = query_var_five.replace('{industry}', industry)

            retry_count = 0

            max_retries = 3

            while retry_count < max_retries:

                try:

                    cursor.execute(query_assign_five)

                    conn.commit()

                    break

                except pymonetdb.OperationalError as e:

                    error_code = e.args[0]

                    if error_code == "42000! Update failed due to conflict with another transaction":

                        logging.warning(f"Update failed due to conflict, retrying ({retry_count + 1}/{max_retries})...")

                        retry_count += 1

                        time.sleep(10)

                    else:

                        raise

            with open('/path/to/update_query_execution_log_two.sql', 'r') as query_file_six:

                query_var_six = query_file_six.read()

                query_assign_six = query_var_six.replace('{industry}', industry)

            cursor.execute(query_assign_six)

            conn.commit()

    else:

        print("No data loaded from the source side")

    cursor.close()

    conn.close()

default_args = {

    'max_active_runs': 1

}

dag = DAG(

    "Monet_testing",

    default_args=default_args,

    schedule_interval='*/5 * * * *',

    start_date=datetime(2023, 5, 14),

    catchup=False,

)

# Create tasks dynamically

for industry_name, industry in zip(industry_names, industries):

    execute_query_task = PythonOperator(

        task_id=f'execute_monet_query_{industry_name}',

        python_callable=execute_monet_query,

        op_kwargs={'industry_name': industry_name, 'industry': industry, 'monetdb_credentials': monetdb_credentials},

        dag=dag,

    )
